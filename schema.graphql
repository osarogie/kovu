# A discussion
type Comment implements Node {
  body: String
  created_at: Int
  id: ID!
  parsed_body: String
  updated_at: Int
  user: User
  user_id: ID!
}

type CommentConnection {
  edges: [CommentEdge]
  pageInfo: PageInfo!
}

type CommentEdge {
  cursor: String!
  node: Comment
}

# Autogenerated input type of CreateComment
input CreateCommentInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  discussion_id: ID!
  body: String!
}

# Autogenerated return type of CreateComment
type CreateCommentPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  commentEdge: CommentEdge
  discussion: Discussion
}

# Autogenerated input type of CreateDiscussion
input CreateDiscussionInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  discussion_id: ID!
  body: String!
}

# Autogenerated return type of CreateDiscussion
type CreateDiscussionPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  discussion: Discussion
  discussionEdge: DiscussionEdge
}

# Autogenerated input type of CreateDiscussionVote
input CreateDiscussionVoteInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  votable_id: ID!
}

# Autogenerated return type of CreateDiscussionVote
type CreateDiscussionVotePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  post: Discussion
}

# Autogenerated input type of DestroyComment
input DestroyCommentInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
  discussion_id: ID!
}

# Autogenerated return type of DestroyComment
type DestroyCommentPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  deletedId: ID!
  discussion: Discussion
}

# Autogenerated input type of DestroyDiscussionVote
input DestroyDiscussionVoteInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  votable_id: ID!
}

# Autogenerated return type of DestroyDiscussionVote
type DestroyDiscussionVotePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  post: Discussion
}

# A discussion
type Discussion implements Node {
  body: String
  comments(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
  ): CommentConnection
  created_at: Int
  excerpt(size: Int = 30): String
  feature_photo: Photo
  group: Group
  id: ID!
  name: String
  parsed_body: String
  parsed_excerpt(size: Int = 30): String
  updated_at: Int
  user: User
  word_count: Int
}

type DiscussionConnection {
  edges: [DiscussionEdge]
  pageInfo: PageInfo!
}

type DiscussionEdge {
  cursor: String!
  node: Discussion
}

# Autogenerated input type of EditComment
input EditCommentInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
  body: String!
}

# Autogenerated return type of EditComment
type EditCommentPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  comment: Comment
}

# The feed root of this schema
type Feed implements Node {
  discussions(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
    since: String
  ): DiscussionConnection
  id: ID!
}

# A group
type Group implements Node {
  id: ID!
  name: String
  permalink: String
}

# The mutation root for this schema
type Mutation {
  CreateComment(input: CreateCommentInput!): CreateCommentPayload
  CreateDiscussion(input: CreateDiscussionInput!): CreateDiscussionPayload
  CreateDiscussionVote(input: CreateDiscussionVoteInput!): CreateDiscussionVotePayload
  DestroyComment(input: DestroyCommentInput!): DestroyCommentPayload
  DestroyDiscussionVote(input: DestroyDiscussionVoteInput!): DestroyDiscussionVotePayload
  EditComment(input: EditCommentInput!): EditCommentPayload
}

interface Node {
  id: ID!
}

# Metadata about a connection
type PageInfo {
  # When paginating forwards, the cursor to continue
  endCursor: String

  # Indicates if there are more pages to fetch
  hasNextPage: Boolean!

  # Indicates if there are any pages prior to the current page
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue
  startCursor: String
}

# A photo
type Photo implements Node {
  height: Int
  id: ID!
  url(size: String = ""): String
  width: Int
}

# The query root of this schema
type Query {
  # Find specific discussion
  discussion(id: ID!): Discussion

  # Root object to get feed collections
  feed: Feed

  # Find specific group
  group(id: ID!): Group
  node(id: ID!): Node

  # Find specific user
  user(id: ID!): User

  # Current user
  viewer: User
}

# A user
type User implements Node {
  bio: String
  created_at: Int
  discussion_count: Int
  discussions(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
  ): DiscussionConnection
  followers: Int
  followings: Int
  id: ID!
  name: String
  profile_picture(size: Int = 0): String
  updated_at: Int
  username: String
}
