# Autogenerated input type of ChangePassword
input ChangePasswordInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  current_password: String!
  new_password: String!
  new_password_confirmation: String
}

# Autogenerated return type of ChangePassword
type ChangePasswordPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  success: String
  user: User
}

# A discussion
type Comment implements Node {
  _id: ID!
  body: String
  created_at: Int
  discussion: Discussion
  discussion_id: ID!
  excerpt(size: Int = 30): String
  id: ID!
  parsed_body: String
  updated_at: Int
  user: User
  user_id: ID!
}

# The connection type for Comment.
type CommentConnection {
  # A list of edges.
  edges: [CommentEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type CommentEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Comment
}

# Autogenerated input type of CreateComment
input CreateCommentInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  body: String!
  discussion_id: ID!
}

# Autogenerated return type of CreateComment
type CreateCommentPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  comment: Comment
  success: Boolean
}

# Autogenerated input type of CreateDiscussion
input CreateDiscussionInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  name: String!
  body: String!
  group_id: ID
  photo: String
}

# Autogenerated return type of CreateDiscussion
type CreateDiscussionPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  discussion: Discussion
  success: Boolean
}

# Autogenerated input type of CreateUser
input CreateUserInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  name: String!
  username: String
  email: String!
  password: String!
  password_confirmation: String
}

# Autogenerated return type of CreateUser
type CreateUserPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  message: String
  success: String
  token: String
  user: User
}

# Autogenerated input type of DeleteComment
input DeleteCommentInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
}

# Autogenerated return type of DeleteComment
type DeleteCommentPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  comment: Comment
  deleted_id: ID!
}

# Autogenerated input type of DeleteDiscussion
input DeleteDiscussionInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
}

# Autogenerated return type of DeleteDiscussion
type DeleteDiscussionPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  deleted_id: ID!
  discussion: Discussion
}

# Autogenerated input type of DeleteUser
input DeleteUserInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  password: ID!
}

# Autogenerated return type of DeleteUser
type DeleteUserPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  deleted_id: ID!
  user: User
}

# A discussion
type Discussion implements Node {
  _id: ID!
  body: String
  comment_count: Int
  comments(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
    by_latest: Boolean = false
  ): CommentConnection
  created_at: Int
  excerpt(size: Int = 30): String
  feature_photo: Photo
  group: Group
  id: ID!
  like_count: Int
  likes(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
  ): LikeConnection
  name: String
  parsed_body: String
  parsed_excerpt(size: Int = 30): String
  updated_at: Int
  user: User
  viewer_does_like: Boolean
  word_count: Int
}

# The connection type for Discussion.
type DiscussionConnection {
  # A list of edges.
  edges: [DiscussionEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type DiscussionEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Discussion
}

# Autogenerated input type of EditComment
input EditCommentInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
  body: String!
}

# Autogenerated return type of EditComment
type EditCommentPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  comment: Comment
}

# Autogenerated input type of EditDiscussion
input EditDiscussionInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
  name: String
  body: String
  group_id: ID
  photo: String
}

# Autogenerated return type of EditDiscussion
type EditDiscussionPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  discussion: Discussion
}

# Autogenerated input type of EditUser
input EditUserInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  name: String
  username: String
  email: String
  photo: String
}

# Autogenerated return type of EditUser
type EditUserPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  success: String
  user: User
}

# The feed root of this schema
type Feed implements Node {
  discussions(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
    q: String
    since: String
    by_latest: Boolean = false
  ): DiscussionConnection
  groups(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
    q: String
    since: String
    by_latest: Boolean = false
  ): GroupConnection
  id: ID!
  top_stories(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
  ): DiscussionConnection
  users(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
    q: String
    since: String
    by_latest: Boolean = false
  ): UserConnection
}

# Autogenerated input type of FollowUser
input FollowUserInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
}

# Autogenerated return type of FollowUser
type FollowUserPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  user: User
}

# A group
type Group implements Node {
  _id: ID!
  body: String
  discussions(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
    by_latest: Boolean = false
  ): DiscussionConnection
  header_image: Photo
  id: ID!
  is_closed: Boolean
  is_private: Boolean
  name: String
  permalink: String
  user: User
  users(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
  ): UserConnection
}

# The connection type for Group.
type GroupConnection {
  # A list of edges.
  edges: [GroupEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type GroupEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Group
}

# A like
type Like implements Node {
  _id: ID!
  discussion: Discussion
  id: ID!
  user: User
  user_id: ID!
}

# The connection type for Like.
type LikeConnection {
  # A list of edges.
  edges: [LikeEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# Autogenerated input type of LikeDiscussion
input LikeDiscussionInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
}

# Autogenerated return type of LikeDiscussion
type LikeDiscussionPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  discussion: Discussion
}

# An edge in a connection.
type LikeEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Like
}

# Autogenerated input type of LoginUser
input LoginUserInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  basic: String!
}

# Autogenerated return type of LoginUser
type LoginUserPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  message: String
  success: String
  token: String
  user: User
  user_id: ID!
}

# Autogenerated input type of LogoutUser
input LogoutUserInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
}

# Autogenerated return type of LogoutUser
type LogoutUserPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  deleted_id: ID!
  user: User
}

# The mutation root for this schema
type Mutation {
  # Edit a users password and return user
  changePassword(input: ChangePasswordInput!): ChangePasswordPayload

  # Create comment for a comment and return comment and new comment
  createComment(input: CreateCommentInput!): CreateCommentPayload

  # Create discussion for a discussion and return discussion and new discussion
  createDiscussion(input: CreateDiscussionInput!): CreateDiscussionPayload

  # Create user
  createUser(input: CreateUserInput!): CreateUserPayload

  # Delete a comment and return comment and deleted comment ID
  deleteComment(input: DeleteCommentInput!): DeleteCommentPayload

  # Delete a discussion and return discussion and deleted discussion ID
  deleteDiscussion(input: DeleteDiscussionInput!): DeleteDiscussionPayload

  # Delete a user and return user and deleted user ID
  deleteUser(input: DeleteUserInput!): DeleteUserPayload

  # Edit a comment and return comment
  editComment(input: EditCommentInput!): EditCommentPayload

  # Edit a discussion and return discussion
  editDiscussion(input: EditDiscussionInput!): EditDiscussionPayload

  # Edit a user and return user
  editUser(input: EditUserInput!): EditUserPayload

  # Follow user
  followUser(input: FollowUserInput!): FollowUserPayload

  # Like discussion
  likeDiscussion(input: LikeDiscussionInput!): LikeDiscussionPayload

  # Login user for a user and return user and new user
  login(input: LoginUserInput!): LoginUserPayload

  # Logout a user and return user and deleted user ID
  logout(input: LogoutUserInput!): LogoutUserPayload

  # Unfollow user
  unfollowUser(input: UnfollowUserInput!): UnfollowUserPayload

  # Unlike a discussion and return discussion
  unlikeDiscussion(input: UnlikeDiscussionInput!): UnlikeDiscussionPayload
}

# An object with an ID.
interface Node {
  # ID of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String
}

# A photo
type Photo implements Node {
  _id: ID!
  height: Int
  id: ID!
  name: String
  url(size: String = ""): String
  width: Int
}

# The query root of this schema
type Query {
  # Find specific discussion
  discussion(id: ID!): Discussion

  # Root object to get feed
  feed: Feed

  # Find specific group
  group(id: ID!): Group

  # Fetches an object given its ID.
  node(
    # ID of the object.
    id: ID!
  ): Node

  # Root object to search models
  search: Search

  # Find specific user
  user(id: ID!): User

  # Current user
  viewer: User
}

# The search root of this schema
type Search implements Node {
  discussions(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
    q: String
  ): DiscussionConnection
  groups(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
    q: String
  ): GroupConnection
  id: ID!
  users(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
    q: String
  ): UserConnection
}

# Autogenerated input type of UnfollowUser
input UnfollowUserInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
}

# Autogenerated return type of UnfollowUser
type UnfollowUserPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  user: User
}

# Autogenerated input type of UnlikeDiscussion
input UnlikeDiscussionInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
}

# Autogenerated return type of UnlikeDiscussion
type UnlikeDiscussionPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  deleted_id: ID!
  discussion: Discussion
}

# A user
type User implements Node {
  _id: ID!
  bio: String
  comments(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
    by_latest: Boolean = false
  ): CommentConnection
  created_at: Int
  discussion_count: Int
  discussions(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
    by_latest: Boolean = false
  ): DiscussionConnection
  follower_count: Int
  followers(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
  ): UserConnection
  following_count: Int
  followings(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
  ): UserConnection
  follows_viewer: Boolean
  groups(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
  ): GroupConnection
  groups_in(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
  ): GroupConnection
  id: ID!
  name: String
  profile_picture(size: Int = 0): String
  profile_picture_name: String
  updated_at: Int
  username: String
  viewer_follows: Boolean
}

# The connection type for User.
type UserConnection {
  # A list of edges.
  edges: [UserEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type UserEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: User
}
